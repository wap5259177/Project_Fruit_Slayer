<div class="bupborderlayout" fit="true">
	<div data-settings="zone:'center'">
		<div style="width:100%;height:100%;" id="container"></div>
	</div>

	<!--<div data-settings="zone:'east',width:350" id='ma-content'>
	</div>-->
</div>

<script type="text/javascript">
	var map;
	var ma_marker;
	var polygon;
	
	#if($modelAreapoint)
		var ma_lat = $!{modelAreapoint.point.latitude};
		var ma_lot = $!{modelAreapoint.point.longitude};
	#else
		var obj = $('.cb'); 
		for(i=0;i<obj.length;i++){
			obj[i].attr('disabled',true);
		}
	#end
	
	var p_markerImage ;
	var n_markerImage ;
	
	var n_markerArr = new Array();
	var p_markerArr = new Array();
	//界面加载完以后执行	
	jQuery(function(){
		//alert($!{nPoints.size()});
	    var center = new qq.maps.LatLng(39.916527,116.397128);//创建中心点坐标
	     
	    //创建地图
	    map = new qq.maps.Map(document.getElementById('container'),{
	        center: center,
	        mapTypeControl:false,//设置地图,卫星控件隐藏
	        scaleControl: true,//地图比例尺控件
	        scaleControlOptions: {
			    position: qq.maps.ControlPosition.BOTTOM_RIGHT
			},
	        zoom: 12
	    });
	    
	    //片区标注
		ma_marker = new qq.maps.Marker({
	        map:map,
	        draggable:false,
	        position: center,
	        icon:new qq.maps.MarkerImage('/res/images/modelarea-marker.png'),
	        title:'$!{modelAreaPoint.modelArea.name}',
	        visible:true
	    });
	    
	    //自定义标注
	    n_markerImage = new qq.maps.MarkerImage('/res/images/n-rural-marker.png'); 
	    p_markerImage = new qq.maps.MarkerImage('/res/images/p-rural-marker.png');
    
	    //查看片区范围,多边形覆盖物
	    polygon = new qq.maps.Polygon({
	        strokeColor: '#000000',
	        strokeWeight: 2,
	       // fillColor: '#111111',
	       	visible:false,
	       	editable:false
	    });
	    
		//给多边形初始化
		var _polygon = "$!{modelAreapoint.polygon}";
		var pg = _polygon.split(';');
		var pathArr = new Array();
		var lat_lng ;
				
		for(i=0;i<pg.length;i++){
			if(pg[i]!=null&&""!=pg[i]){
				lat_lng = pg[i].split(',');
				pathArr[i] = new qq.maps.LatLng(lat_lng[0].trim(),lat_lng[1].trim());
			}
		}
		//polygon.setMap(map);
		polygon.setPath(pathArr);
		
		
		
	    var controlDiv = new Array();//地图上控件div
	    var controlStyle = "padding:5px;border:2px solid #86acf2;background:#ffffff";
	    for(i=0;i<5;i++){
	    	controlDiv[i] = document.createElement("div");//创建节点
		    controlDiv[i].style.cssText = controlStyle;//样式
			controlDiv[i].index = (i+1); //设置在当前布局中的位置
			if(i==0){
				controlDiv[i].innerHTML = "<span id='show_map'><a href='#' onclick='show_map();'>示范片点<a/></span>";
			}
			if(i==1){
				controlDiv[i].innerHTML = "<input type='checkbox' id='show_mapolygon' onchange='show_mapolygon(this);' class='cb' name='selected'/><label for='show_mapolygon'>示范片范围</label>";
				controlDiv[i].style.margin = '1 20px';
			}
			if(i==2){
				controlDiv[i].innerHTML = "<input type='checkbox' id='show_nrural' value='' onchange='show_nrural(this);' class='cb' name='selected'/><label for='show_nrural'>主体村</label>";
				controlDiv[i].style.margin = '1 10px';
			}
			if(i==3){
				controlDiv[i].innerHTML = "<input type='checkbox' id='show_prural' onchange='show_prural(this);' class='cb' name='selected'/><label for='show_prural'>非主体村</label>";
			}
			if(i==4){
				controlDiv[i].innerHTML = "<input type='checkbox' id='controlAll' onclick='selectAll();' class='cb' name='controlAll'/><label for='controlAll'>所有</label>";
			}
			
			map.controls[qq.maps.ControlPosition.TOP_CENTER].push(controlDiv[i]);
	    }
	    
	    
	    
	    
	    #foreach($it in $nPoints)
			//alert('$!{velocityCount}');
			var marker = new qq.maps.Marker({
		        map:map,
		        draggable:false,
		        position: new qq.maps.LatLng($it.point.latitude,$it.point.longitude),
		       	title:'$it.title',
		       	icon:new qq.maps.MarkerImage('/res/images/n-rural-marker.png'),
		        visible:false
		    });
			n_markerArr[($!{velocityCount} - 1)] = marker;
		#end
	    
	    
	    #foreach($it in $pPoints)
			var marker = new qq.maps.Marker({
		        map:map,
		        draggable:false,//设置标注不可以拽动
		        position: new qq.maps.LatLng($it.point.latitude,$it.point.longitude),
		       	title:'$it.title',
		       	icon:new qq.maps.MarkerImage('/res/images/p-rural-marker.png'),
		        visible:false
		    });
			p_markerArr[($!{velocityCount} - 1)] = marker;
		#end
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    /*
	    	1.创建了片区并编辑过 	
	    	2.创建了片区但未编辑过
	    	3.没有创建片区
	    */
	     #if($modelAreapoint)
	    	//alert($modelAreapoint.point.latitude+','+$modelAreapoint.point.longitude);
	    	
	    	map.setCenter(new qq.maps.LatLng(ma_lat,ma_lot));
	    	ma_marker.setPosition(new qq.maps.LatLng(ma_lat,ma_lot));
	    	ma_marker.setVisible(true);
	    #else
	    	/*
	    		只要没有编辑过示范片,都让地图上面的那几个复选框灰掉.
	    	*/
	    	//alert($("input").length);
	    	/*
	    	var _cb = document.getElementsByTagName("input"); 
	    	alert(_cb.length);
	    	for(i=0;i<_cb.length;i++){
	    		_cb[i].setAttribute('disabled','disabled');
	    	}
	    	*/
	    	
	    	
	    	#if(!$isModelArea)
	    		//alert('不属于示范片');
	    		alert("警告！新农村示范片区未创建！！");
	    		//将地图上自定义的复选框清除
	    		for(i=0;i<controlDiv.length;i++){
	    			controlDiv[i].style = "";
	    			controlDiv[i].innerHTML = "";
	    		}
		    	var geocoder = new qq.maps.Geocoder({
				    complete:function(result){
				        map.setCenter(result.detail.location);
				    }
				});
				geocoder.getLocation("广东省,广州市");
	    	#else
	    		alert('没有编辑过示范片!');
				var geocoder = new qq.maps.Geocoder({
				    complete:function(result){
				        map.setCenter(result.detail.location);
			        	ma_marker.setPosition(result.detail.location);
				    }
				});
				geocoder.getLocation("$!{modelArea.cityName},$!{modelArea.countyName}");
	    	#end  
	    #end
	})
	
//------------------------------------------------------------------------------------------------
	
	/*
		TODO:  1.假如没有创建片区,让三个checkbox灰掉.
			   2.假如创建了片区,但没有编辑过片区信息(未编辑过片区信息是不能编辑村子点信息的),让三个checkbox灰掉.
	*/
	
	var checklist = document.getElementsByName ("selected");
	function show_map(){
		#if($modelAreapoint)
			map.panTo(new qq.maps.LatLng(ma_lat,ma_lot));
		    ma_marker.setPosition(new qq.maps.LatLng(ma_lat,ma_lot));
		#end
	}
	
	function show_mapolygon(obj){
		var check_num = $("input:checkbox:checked").length - 1;
		//alert(check_num+","+);
		if(obj.checked==true){
			//alert('示范片范围选中!');
			//点击时让他回到原来的点
			map.panTo(new qq.maps.LatLng(ma_lat,ma_lot));
	    	ma_marker.setPosition(new qq.maps.LatLng(ma_lat,ma_lot));
			polygon.setMap(map);
			polygon.setVisible(true);
		}else{
			//alert('取消!');
			check_num -= 1;
			polygon.setVisible(false);
			polygon.setMap(null);
		}
		is_check_all(check_num,checklist.length);
	}
	
	function show_nrural(obj){
		var check_num = $("input:checkbox:checked").length - 1;
		if(obj.checked==true){
			_check_show_rural(n_markerArr);
		}else{
			check_num -= 1;
			_check_hide_rural(n_markerArr);
		}
		is_check_all(check_num,checklist.length);
	}
	
	function show_prural(obj){
		var check_num = $("input:checkbox:checked").length - 1;
		if(obj.checked==true){
			_check_show_rural(p_markerArr);
		}else{
			check_num -= 1;
			_check_hide_rural(p_markerArr);
		}
		is_check_all(check_num,checklist.length);
	}
	
	
	
	//全选
 	//var checklist = 0;
	function selectAll(){
		//checklist = document.getElementsByName ("selected");
	   	if(document.getElementById("controlAll").checked){
		   for(var i=0;i<checklist.length;i++){
      			checklist[i].checked = 1;
   			}
   			map.panTo(new qq.maps.LatLng(ma_lat,ma_lot));
	    	ma_marker.setPosition(new qq.maps.LatLng(ma_lat,ma_lot));
			polygon.setMap(map);
			polygon.setVisible(true); 
			
			_check_show_rural(n_markerArr);
			_check_show_rural(p_markerArr);
				/*
			if($('#show_nrural').checked==1){
			}
			if($('#show_prural').checked==1){
			}
			*/
		}else{
		  	for(var j=0;j<checklist.length;j++){
		     	checklist[j].checked = 0;
		  	}
		  	polygon.setVisible(false);
		  	polygon.setMap(null);
		  	
		  	_check_hide_rural(n_markerArr);
		  	_check_hide_rural(p_markerArr);
		}
	}
//-----------------------------------------------------------------	

	//显示村子标注
	function _check_show_rural(markerArr){
		for(i=0;i<markerArr.length;i++){
			markerArr[i].setVisible(true);
		}
		/*
		if(type=='主体村'){
			alert(n_markerArr.length);
			for(i=0;i<n_markerArr.length;i++){
				n_markerArr[i].setVisible(true);
			}
		}else{
			alert(p_markerArr.length);
			for(i=0;i<p_markerArr.length;i++){
				p_markerArr[i].setVisible(true);
			}
		}
		*/
	}
	
	//村子标注隐藏
	function _check_hide_rural(markerArr){
		/*
		for(i=0;i<markerArr.length;i++){
			markerArr[i].setMap(null);
		}
		markerArr.splice(0,markerArr.length);//清空数组元素
		*/
		for(i=0;i<markerArr.length;i++){
			markerArr[i].setVisible(false);
		}
	}
	
	function is_check_all(current_checked,check_len){
		//alert(current_checked+','+check_len);
		if(current_checked<check_len){
			//alert('去掉');
			document.getElementById("controlAll").checked = 0;
		}else{
			//alert('勾选');
			document.getElementById("controlAll").checked = 1;
		}
	}
	
</script>


